Index: Blackbox.cpp
===================================================================
--- Blackbox.cpp	(revision 88)
+++ Blackbox.cpp	(working copy)
@@ -60,6 +60,7 @@
 OSVERSIONINFO osInfo;
 bool usingWin2kXP;
 bool usingNT;
+bool usingx64;
 
 //====================
 
@@ -343,6 +344,17 @@
 	usingNT         = osInfo.dwPlatformId == VER_PLATFORM_WIN32_NT;
 	usingWin2kXP    = usingNT && osInfo.dwMajorVersion >= 5;
 
+	//64-bit OS test, when running as 32-bit under WoW
+	BOOL bIs64BitOS= FALSE;
+	typedef BOOL (WINAPI *LPFN_ISWOW64PROCESS)(HANDLE, PBOOL);
+	LPFN_ISWOW64PROCESS fnIsWow64Process = (LPFN_ISWOW64PROCESS)GetProcAddress(GetModuleHandle("kernel32"),"IsWow64Process");
+	if (NULL != fnIsWow64Process)
+		fnIsWow64Process(GetCurrentProcess(), &bIs64BitOS);
+	usingx64=bIs64BitOS;
+	//64-bit OS test, if compiled as native 64-bit. In case we ever need it.
+	if (!usingx64)
+		usingx64=(sizeof(int)!=sizeof(void*));
+
 	setlocale(LC_TIME, "");
 
 	BBhwnd = FindWindow(szBlackboxClass, szBlackboxName);
@@ -1643,37 +1655,53 @@
 bool RunEntriesIn (HKEY root_key, LPCSTR subpath, UINT flags)
 {
 	int index; HKEY hKey; bool ret = false; char path[100];
+	typedef BOOL (WINAPI *LPFN_WOW64ENABLEREDIR)(BOOL);
+	LPFN_WOW64ENABLEREDIR fnEnableRedir;
 
 	sprintf(path, "Software\\Microsoft\\Windows\\CurrentVersion\\%s", subpath);
-	if (ERROR_SUCCESS != RegOpenKeyEx(root_key, path, 0, KEY_ALL_ACCESS, &hKey))
-		return ret;
-
-	//log_printf(2, "\In Registry: %s\\%s", HKEY_CURRENT_USER == root_key ? "HKCU": "HKLM", path);
-	for (index=0;;++index)
+	for(int i=0;i<(usingx64?2:1);++i)
 	{
-		char szNameBuffer[200]; char szValueBuffer[1000];
-		DWORD dwNameSize = sizeof szNameBuffer;
-		DWORD dwValueSize = sizeof szValueBuffer;
-		DWORD dwType;
+		if (ERROR_SUCCESS != RegOpenKeyEx(root_key, path, 0, KEY_ALL_ACCESS|(i?KEY_WOW64_64KEY:KEY_WOW64_32KEY), &hKey))
+			return ret;
 
-		if (ERROR_SUCCESS != RegEnumValue(
-				hKey, index,
-				szNameBuffer, &dwNameSize,
-				NULL, &dwType,
-				(BYTE*)szValueBuffer, &dwValueSize
-				)) break;
+		//if busy with x64 section, disable the filesystem redirection
+		if (i==1)
+		{
+			fnEnableRedir = (LPFN_WOW64ENABLEREDIR)GetProcAddress(GetModuleHandle("kernel32"),"Wow64EnableWow64FsRedirection");
+			fnEnableRedir(FALSE);
+		}
 
-		ret = true;
-		if (flags & RS_CHCK) break;
+		//log_printf(2, "\In Registry: %s\\%s", HKEY_CURRENT_USER == root_key ? "HKCU": "HKLM", path);
+		for (index=0;;++index)
+		{
+			char szNameBuffer[200]; char szValueBuffer[1000];
+			DWORD dwNameSize = sizeof szNameBuffer;
+			DWORD dwValueSize = sizeof szValueBuffer;
+			DWORD dwType;
 
-		//log_printf(2, "\t\tRunning: %s", szValueBuffer);
-		WinExec(szValueBuffer, SW_SHOWNORMAL);
+			if (ERROR_SUCCESS != RegEnumValue(
+					hKey, index,
+					szNameBuffer, &dwNameSize,
+					NULL, &dwType,
+					(BYTE*)szValueBuffer, &dwValueSize
+					)) break;
 
-		if (flags & RS_ONCE)
-			if (ERROR_SUCCESS == RegDeleteValue(hKey, szNameBuffer))
-				--index;
+			ret = true;
+			if (flags & RS_CHCK) break;
+
+			//log_printf(2, "\t\tRunning: %s", szValueBuffer);
+			WinExec(szValueBuffer, SW_SHOWNORMAL);
+
+			if (flags & RS_ONCE)
+				if (ERROR_SUCCESS == RegDeleteValue(hKey, szNameBuffer))
+					--index;
+		}
+		RegCloseKey (hKey);
+
+		//Enable filesystem redirection, if we disabled it;
+		if (i==1)
+			fnEnableRedir(TRUE);
 	}
-	RegCloseKey (hKey);
 	return ret;
 }
 
Index: Install.cpp
===================================================================
--- Install.cpp	(revision 88)
+++ Install.cpp	(working copy)
@@ -32,25 +32,31 @@
 
 #include "BB.H"
 
+extern bool usingx64;
+
 enum { A_DEL, A_DW, A_SZ };
 
 static int write_key(int action, HKEY root, const char *ckey, const char *cval, const char *cdata)
 {
 	HKEY k;
 	DWORD result;
-	int r = RegCreateKeyEx(root, ckey, 0, NULL, REG_OPTION_NON_VOLATILE, KEY_WRITE, NULL, &k, &result);
-	if (ERROR_SUCCESS == r)
+	int r;
+	for(int i=0;i<(usingx64?2:1);++i)
 	{
-		if (A_DEL==action)
-			r = RegDeleteValue(k, cval);
-		else
-		if (A_DW==action)
-			r = RegSetValueEx(k, cval, 0, REG_DWORD, (LPBYTE)&cdata, sizeof(DWORD));
-		else
-		if (A_SZ==action)
-			r = RegSetValueEx(k, cval, 0, REG_SZ, (LPBYTE)cdata, strlen(cdata)+1);
+		r = RegCreateKeyEx(root, ckey, 0, NULL, REG_OPTION_NON_VOLATILE, KEY_WRITE|(i?KEY_WOW64_64KEY:KEY_WOW64_32KEY), NULL, &k, &result);
+		if (ERROR_SUCCESS == r)
+		{
+			if (A_DEL==action)
+				r = RegDeleteValue(k, cval);
+			else
+			if (A_DW==action)
+				r = RegSetValueEx(k, cval, 0, REG_DWORD, (LPBYTE)&cdata, sizeof(DWORD));
+			else
+			if (A_SZ==action)
+				r = RegSetValueEx(k, cval, 0, REG_SZ, (LPBYTE)cdata, strlen(cdata)+1);
 
-		RegCloseKey(k);
+			RegCloseKey(k);
+		}
 	}
 	return r == ERROR_SUCCESS;
 }
Index: win0x500.h
===================================================================
--- win0x500.h	(revision 88)
+++ win0x500.h	(working copy)
@@ -32,6 +32,14 @@
 #ifndef __WIN0X500_H_
 #define __WIN0X500_H_
 
+// defines for 64 bit registry access. With these here we don't need a 64-bit OS SDK
+#ifndef KEY_WOW64_64KEY
+#define KEY_WOW64_64KEY 0x0100
+#endif
+#ifndef KEY_WOW64_32KEY
+#define KEY_WOW64_32KEY 0x0200
+#endif
+
 //===========================================================================
 #ifdef __BORLANDC__
 //===========================================================================
